diff --git a/content/browser/frame_host/render_frame_host_delegate.cc b/content/browser/frame_host/render_frame_host_delegate.cc
index 4d0a8ea553c5..0fac0b22ff2f 100644
--- a/content/browser/frame_host/render_frame_host_delegate.cc
+++ b/content/browser/frame_host/render_frame_host_delegate.cc
@@ -89,8 +89,10 @@ bool RenderFrameHostDelegate::ShouldRouteMessageEvent(
 }
 
 std::unique_ptr<WebUIImpl>
-RenderFrameHostDelegate::CreateWebUIForRenderFrameHost(const GURL& url) {
-  return nullptr;
+RenderFrameHostDelegate::CreateWebUIForRenderFrameHost(
+    const GURL& url,
+    const std::string& frame_name) {
+  return nullptr;
 }
 
 bool RenderFrameHostDelegate::ShouldAllowRunningInsecureContent(
diff --git a/content/browser/frame_host/render_frame_host_delegate.h b/content/browser/frame_host/render_frame_host_delegate.h
index 197b64b49fd6..2e94b03c4f44 100644
--- a/content/browser/frame_host/render_frame_host_delegate.h
+++ b/content/browser/frame_host/render_frame_host_delegate.h
@@ -234,7 +234,8 @@ class CONTENT_EXPORT RenderFrameHostDelegate {
   // Creates a WebUI object for a frame navigating to |url|. If no WebUI
   // applies, returns null.
   virtual std::unique_ptr<WebUIImpl> CreateWebUIForRenderFrameHost(
-      const GURL& url);
+      const GURL& url,
+      const std::string& frame_name);
 
   // Called by |frame| to notify that it has received an update on focused
   // element. |bounds_in_root_view| is the rectangle containing the element that
diff --git a/content/browser/frame_host/render_frame_host_impl.cc b/content/browser/frame_host/render_frame_host_impl.cc
index 82ab04e1019d..209dbd15d894 100644
--- a/content/browser/frame_host/render_frame_host_impl.cc
+++ b/content/browser/frame_host/render_frame_host_impl.cc
@@ -17,6 +17,7 @@
 #include "base/metrics/user_metrics.h"
 #include "base/process/kill.h"
 #include "base/time/time.h"
+#include "base/unguessable_token.h"
 #include "build/build_config.h"
 #include "content/browser/accessibility/browser_accessibility_manager.h"
 #include "content/browser/accessibility/browser_accessibility_state_impl.h"
@@ -3418,8 +3464,23 @@ bool RenderFrameHostImpl::UpdatePendingWebUI(const GURL& dest_url,
       DCHECK(web_ui_);
       should_reuse_web_ui_ = true;
     } else {
+      // Give the frame a name if it does not already have one.
+      // The reason is web ui code base the frame look up on the frame name.
+      std::string frame_name = GetFrameName();
+      if (frame_name.empty() && !frame_tree_node_->IsMainFrame()) {
+        frame_name = base::StringPrintf("frame_%i", frame_tree_node_->frame_tree_node_id());
+        frame_tree_node_->SetFrameName(
+            frame_name, frame_name + base::UnguessableToken::Create().ToString());
+      }
+
+      // If the web ui is in subframes, the parent frame bindings does not have the web ui binding,
+      // so we reset the bindings for the subframes.
+      if (!frame_tree_node_->IsMainFrame() && new_web_ui_type != WebUI::kNoWebUI) {
+        entry_bindings = NavigationEntryImpl::kInvalidBindings;
+      }
+
       // Otherwise create a new pending WebUI.
-      pending_web_ui_ = delegate_->CreateWebUIForRenderFrameHost(dest_url);
+      pending_web_ui_ = delegate_->CreateWebUIForRenderFrameHost(dest_url, frame_name);
       DCHECK(pending_web_ui_);
       pending_web_ui_type_ = new_web_ui_type;
 
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index 4fa796b38b3f..376e8e143770 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -685,12 +685,34 @@ RenderFrameHostManager* WebContentsImpl::GetRenderManagerForTesting() {
   return GetRenderManager();
 }
 
+void SendMessageToFrameTreeWebUIs(RenderFrameHostImpl* parent_frame_host,
+                                  const IPC::Message& message,
+                                  int& dispatch_count) {
+  // Get the web ui or the pending one if it's not yet commited.
+  WebUIImpl* web_ui = parent_frame_host->web_ui()
+      ? parent_frame_host->web_ui()
+      : parent_frame_host->pending_web_ui();
+  if (web_ui && web_ui->OnMessageReceived(message)) {
+    ++dispatch_count;
+  }
+
+  size_t child_count = parent_frame_host->frame_tree_node()->child_count();
+  for (size_t i = 0; i < child_count; ++i) {
+    RenderFrameHostImpl* sub_frame_host =
+        parent_frame_host->frame_tree_node()->child_at(i)->current_frame_host();
+    SendMessageToFrameTreeWebUIs(sub_frame_host, message, dispatch_count);
+  }
+}
+
 bool WebContentsImpl::OnMessageReceived(RenderViewHostImpl* render_view_host,
                                         const IPC::Message& message) {
   RenderFrameHost* main_frame = render_view_host->GetMainFrame();
+  int dispatch_count = 0;
   if (main_frame) {
-    WebUIImpl* web_ui = static_cast<RenderFrameHostImpl*>(main_frame)->web_ui();
-    if (web_ui && web_ui->OnMessageReceived(message))
+    RenderFrameHostImpl* main_frame_host =
+        static_cast<RenderFrameHostImpl*>(main_frame);
+    SendMessageToFrameTreeWebUIs(main_frame_host, message, dispatch_count);
+    if (dispatch_count > 0)
       return true;
   }
 
@@ -5021,8 +5043,9 @@ NavigationControllerImpl& WebContentsImpl::GetControllerForRenderManager() {
 }
 
 std::unique_ptr<WebUIImpl> WebContentsImpl::CreateWebUIForRenderFrameHost(
-    const GURL& url) {
-  return CreateWebUI(url, std::string());
+    const GURL &url,
+    const std::string& frame_name) {
+  return CreateWebUI(url, frame_name);
 }
 
 NavigationEntry*
diff --git a/content/browser/web_contents/web_contents_impl.h b/content/browser/web_contents/web_contents_impl.h
index 65a6fa4b26a9..203d2c8ebce6 100644
--- a/content/browser/web_contents/web_contents_impl.h
+++ b/content/browser/web_contents/web_contents_impl.h
@@ -538,7 +538,8 @@ class CONTENT_EXPORT WebContentsImpl
       SiteInstance* source_site_instance) const override;
   void EnsureOpenerProxiesExist(RenderFrameHost* source_rfh) override;
   std::unique_ptr<WebUIImpl> CreateWebUIForRenderFrameHost(
-      const GURL& url) override;
+      const GURL& url,
+      const std::string& frame_name) override;
   void SetFocusedFrame(FrameTreeNode* node, SiteInstance* source) override;
   RenderFrameHost* GetFocusedFrameIncludingInnerWebContents() override;
   void OnFocusedElementChangedInFrame(
